
worker_rlimit_core 500m;
worker_rlimit_nofile 10000;
working_directory /tmp/;

user www-data;
worker_processes auto;

error_log /var/log/nginx/error_log warn;

pid /var/run/nginx.pid;

events {
    worker_connections  4096;
    multi_accept on;
    use epoll;
}

http {
    upstream origin-http {
        server {{ origin_domain }}:80;
        keepalive 512;
    }

    upstream origin-https {
        server {{ origin_domain }}:443;
        keepalive 512;
    }

    include mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $bytes_sent $request_time "$http_referer" "$http_user_agent" "$scheme" '
        '"$http_host" $pid $request_length "$sent_http_content_range" "$http_x_forwarded_for" '
        '"$http_x_forwarded_server" "$http_x_forwarded_host" "$sent_http_cache_control" '
        '$connection $request_id "$upstream_addr" $upstream_connect_time '
        '$upstream_header_time $upstream_cache_status';

    access_log /var/log/nginx/access_log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    keepalive_timeout 60;
    keepalive_requests 1000;
    client_header_timeout 20;
    client_body_timeout 20;
    reset_timedout_connection on;
    send_timeout 20;
    server_tokens off;

    open_file_cache max=8192 inactive=5m;
    open_file_cache_valid 2m;
    open_file_cache_min_uses 1;
    open_file_cache_errors on;

    gzip on;
    gzip_types application/vnd.apple.mpegurl video/f4m application/dash+xml text/xml text/vtt;
    gzip_proxied any;

    more_set_headers 'X-Proxy-Me: $hostname';
    more_set_headers 'X-Proxy-Session: $request_id';
    more_set_headers 'X-Proxy-Cache: $upstream_cache_status';

    proxy_cache_path /usr/local/nginx/long-cache/ levels=1:2 keys_zone=long-cache-zone:100m inactive=30d max_size=100g use_temp_path=off;
    proxy_cache_path /usr/local/nginx/short-cache/ levels=1:2 keys_zone=short-cache-zone:100m inactive=5m max_size=100g use_temp_path=off;
    proxy_cache_lock on;
    proxy_cache_lock_timeout 15s;
    proxy_cache_valid 404 10s;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_cache_key $scheme$host$uri;
    proxy_cache_revalidate on;

    proxy_set_header Host $http_host;
    proxy_set_header Connection "";
    proxy_set_header Accept-Encoding "";
    proxy_http_version 1.1;

    lua_package_path "/usr/local/src/lua-resty-http/lib/?.lua;/usr/local/openresty/nginx/conf/?.lua;;";

    server {
        listen 80;
        listen 443 ssl;
        server_name prefetch;

        ssl_certificate     /usr/local/openresty/nginx/conf/ssl/proxy.crt;
        ssl_certificate_key /usr/local/openresty/nginx/conf/ssl/proxy.pem;
        ssl_session_timeout 5m;

        # HLS segments
        location ~ ^(.*/seg\-)([1-3])([^0-9].*\.ts)$ {
            proxy_pass $scheme://origin-$scheme;
            proxy_cache long-cache-zone;

            access_by_lua_block {
                local prefetcher = require "prefetcher"
                prefetcher.prefetch_segments(4, ngx.var[1], ngx.var[2], ngx.var[3])
            }
        }

        location ~ ^(.*/seg\-)(\d+)(.*\.ts)$ {
            proxy_pass $scheme://origin-$scheme;
            proxy_cache short-cache-zone;

            access_by_lua_block {
                local prefetcher = require "prefetcher"
                prefetcher.prefetch_segments(2, ngx.var[1], ngx.var[2], ngx.var[3])
            }
        }

        # HLS manifest
        location ~ ^.*\.m3u8$ {
            proxy_pass $scheme://origin-$scheme;
            proxy_cache long-cache-zone;
        }

        # HDS segments
        location ~ ^(.*Seg1-Frag)([1-3])$ {
            proxy_pass $scheme://origin-$scheme;
            proxy_cache long-cache-zone;

            access_by_lua_block {
                local prefetcher = require "prefetcher"
                prefetcher.prefetch_segments(2, ngx.var[1], ngx.var[2], "")
            }
        }

        location ~ ^(.*Seg1-Frag)(\d+)$ {
            proxy_pass $scheme://origin-$scheme;
            proxy_cache short-cache-zone;

            access_by_lua_block {
                local prefetcher = require "prefetcher"
                prefetcher.prefetch_segments(2, ngx.var[1], ngx.var[2], "")
            }
        }

        # HDS manifest
        location ~ ^.*\.f4m$ {
            proxy_pass $scheme://origin-$scheme;
            proxy_cache long-cache-zone;
        }

        # DASH segments
        location ~ ^(.*/fragment\-)([1-3])([^0-9].*\.m4s)$ {
            proxy_pass $scheme://origin-$scheme;
            proxy_cache long-cache-zone;

            access_by_lua_block {
                local prefetcher = require "prefetcher"
                prefetcher.prefetch_segments(2, ngx.var[1], ngx.var[2], ngx.var[3])
            }
        }

        location ~ ^(.*/fragment\-)(\d+)(.*\.m4s)$ {
            proxy_pass $scheme://origin-$scheme;
            proxy_cache short-cache-zone;

            access_by_lua_block {
                local prefetcher = require "prefetcher"
                prefetcher.prefetch_segments(2, ngx.var[1], ngx.var[2], ngx.var[3])
            }
        }

        # DASH init segment
        location ~ ^.*/init-[^/]+\.mp4$ {
            proxy_pass $scheme://origin-$scheme;
            proxy_cache long-cache-zone;
        }

        # DASH manifest
        location ~ ^.*\.mpd$ {
            proxy_pass $scheme://origin-$scheme;
            proxy_cache long-cache-zone;
        }

        # default proxy to origin (no cache)
        location / {
            proxy_pass $scheme://origin-$scheme;
        }

        # nginx status page
        location = /nginx_status {
            allow 127.0.0.1/32;
            deny all;

            stub_status on;
        }
    }
}

